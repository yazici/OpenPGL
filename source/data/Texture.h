#ifndef _RENDERER_TEXTURE_H
#define _RENDERER_TEXTURE_H

#include <GL/glew.h>
#include <vector>

namespace pgl
{
	class Texture
	{
	public:
		Texture();

		/**
		* Каждый тексель текструры в векторе определяется 4,
		* подряд идущими байтами(RGBA).
		*
		* При передачи аргументов w и h не учитываеются эти 4-е байта.
		* Напимер размер текстуры 500x*500 а размер вектора 500*500*4.
		*
		* @param data вектор, в котором содежится текстура
		* @param w ширина текстуры
		* @param h высота текстуры
		*/
		Texture(const std::vector<GLubyte>& data, int w, int h);

		/**
		* Каждый тексель текструры в массиве определяется 4,
		* подряд идущими байтами(RGBA).
		*
		* При передачи аргументов w и h не учитываеются эти 4-е байта.
		* Напимер размер текстуры 500x*500 а размер массива 500*500*4.
		*
		* @param data массив, содержащий текстру
		* @param w ширина текструры
		* @param h высота текструры
		*/
		Texture(const GLubyte* data, int w, int h);

		~Texture();

		/**
		* Метод, инициализирующий текстуру
		* (создающий).
		*
		* Каждый тексель текструры в векторе определяется 4,
		* подряд идущими байтами(RGBA).
		*
		* При передачи аргументов w и h не учитываеются эти 4-е байта.
		* Напимер размер текстуры 500x*500 а размер вектора 500*500*4.
		*
		* @param data вектор, в котором содежится текстура
		* @param w ширина текстуры
		* @param h высота текстуры
		*/
		void create(const std::vector<GLubyte>& data, int w, int h);

		/**
		* Метод, инициализирующий текстуру
		* (создающий).
		*
		* Каждый тексель текструры в массиве определяется 4,
		* подряд идущими байтами(RGBA).
		*
		* При передачи аргументов w и h не учитываеются эти 4-е байта.
		* Напимер размер текстуры 500x*500 а размер массива 500*500*4.
		*
		* @param data вектор, в котором содежится текстура
		* @param w ширина текстуры
		* @param h высота текстуры
		*/
		void create(const GLubyte* data, int w, int h);

		/**
		* Метод, делающий текстуру текущей.
		*
		* @param slot (текстурный слот) необходим для определния слота,
		* к которому будет подключаться текстура
		*/
		void bind(GLint slot = 0) const noexcept;

		/**
		* Метод, делающий текстуру не текущей.
		*/
		void unbind() const noexcept;

		GLint width() const noexcept;

		GLint height() const noexcept;

	private:
		std::vector<GLubyte> _data;
		GLuint _tex;
		GLint _w;
		GLint _h;
	};
}


#endif // !_RENDERER_TEXTURE_H
